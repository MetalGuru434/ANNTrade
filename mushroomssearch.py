# -*- coding: utf-8 -*-
"""mushroomsSearch.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C3R-m4uQ9Gm3Z6oNiGLJdO_ykDXF1BRJ
"""

# Ваше решение
from google.colab import drive
drive.mount('/content/drive')
!unzip -q "/content/drive/MyDrive/Colab Notebooks/v5-mushrooms.v1i.yolov8.zip" -d "/content/mushrooms_dataset"

# Проверим структуру
!find /content/mushrooms_dataset -maxdepth 2
# ===================== НАСТРОЙКИ =====================
ZIP_NAME      = "v5-mushrooms.v1i.yolov8.zip"  # имя вашего архива на Google Диске
DRIVE_SUBDIR  = "YOLO-weights"                 # папка на Google Диске для сохранения весов
EPOCHS        = 50
IMGSZ         = 640
BATCH         = 16
MODEL_NAME    = "yolov8m.pt"                   # требование: размер m или больше (можно yolov8l.pt/yolov8x.pt)

# ===================== 1) МОНТИРУЕМ GOOGLE ДИСК =====================
from google.colab import drive
drive.mount('/content/drive')

import os, glob, textwrap, shutil, pathlib
from pathlib import Path

drive_root = "/content/drive/MyDrive"
notebooks_dir = f"{drive_root}/Colab Notebooks"

# Ищем архив рядом с ноутбуком и в корне Диска:
candidates = [
    f"{notebooks_dir}/{ZIP_NAME}",
    f"{drive_root}/{ZIP_NAME}",
]
found = [p for p in candidates if os.path.exists(p)]
if not found:
    # Поиск по всему диску (если файл в другой папке)
    found = glob.glob(f"{drive_root}/**/{ZIP_NAME}", recursive=True)

if not found:
    raise FileNotFoundError(
        textwrap.dedent(f"""
        Не найден архив {ZIP_NAME} на Google Диске.
        Положите ZIP в "Мой диск/Colab Notebooks" либо укажите правильное имя в ZIP_NAME.
        """)
    )

zip_path = found[0]
print("Найден архив:", zip_path)

# ===================== 2) РАСПАКОВЫВАЕМ ДАТАСЕТ =====================
!mkdir -p /content/dataset
!unzip -q "{zip_path}" -d /content/dataset

# Ищем data.yaml внутри распакованного архива:
data_yaml = list(Path("/content/dataset").glob("**/data.yaml"))
if not data_yaml:
    raise FileNotFoundError("Файл data.yaml не найден в распакованном архиве. Проверьте содержимое ZIP.")
data_yaml_path = str(data_yaml[0])
print("data.yaml:", data_yaml_path)

# ===================== 3) УСТАНАВЛИВАЕМ ULTRALYTICS =====================
!pip -q install ultralytics

from ultralytics import YOLO

# ===================== 4) ОБУЧЕНИЕ YOLOv8m =====================
model = YOLO(MODEL_NAME)  # yolov8m.pt
results = model.train(
    data=data_yaml_path,
    epochs=EPOCHS,
    imgsz=IMGSZ,
    batch=BATCH,
    project="runs/detect",
    name="train_yolov8m",
    exist_ok=True
)

# Build training curves
import pandas as pd
import matplotlib.pyplot as plt
results_csv = Path("runs/detect/train_yolov8m/results.csv")
if results_csv.exists():
    history = pd.read_csv(results_csv)
    # Ultralytics CSV formats change over time. Some versions log individual
    # loss components (e.g. ``train/box_loss``) instead of a single total loss.
    # To keep this script compatible we dynamically collect all train/ and
    # val/ columns that end with "loss" and sum them to obtain total losses.
    train_losses = [c for c in history.columns if c.startswith("train/") and c.endswith("loss")]
    val_losses = [c for c in history.columns if c.startswith("val/") and c.endswith("loss")]
    if train_losses:
        history["train/total_loss"] = history[train_losses].sum(axis=1)
    if val_losses:
        history["val/total_loss"] = history[val_losses].sum(axis=1)

    # Prefer the aggregated "train/total_loss" and "val/total_loss" columns,
    # but fall back to legacy "train/loss" and "val/loss" if necessary.
    train_loss_col = "train/total_loss" if "train/total_loss" in history.columns else "train/loss"
    val_loss_col = "val/total_loss" if "val/total_loss" in history.columns else "val/loss"

    plt.figure(figsize=(8, 6))
    plt.plot(history["epoch"], history[train_loss_col], label=train_loss_col)
    plt.plot(history["epoch"], history[val_loss_col], label=val_loss_col)
    if "metrics/mAP50" in history.columns:
        plt.plot(history["epoch"], history["metrics/mAP50"], label="mAP50")
    plt.xlabel("Epoch")
    plt.ylabel("Value")
    plt.title("YOLOv8m Training Metrics")
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.savefig("runs/detect/train_yolov8m/learning_curve.png")
    plt.show()
else:
    print(f"Results file not found: {results_csv}")

# Путь к лучшим весам после обучения:
best_local = "runs/detect/train_yolov8m/weights/best.pt"
if not os.path.exists(best_local):
    # fallback: попробуем найти best.pt на случай другого имени папки
    all_best = glob.glob("runs/detect/**/weights/best.pt", recursive=True)
    if not all_best:
        raise FileNotFoundError("best.pt не найден после обучения.")
    best_local = all_best[-1]
print("Лучшие веса:", best_local)

# ===================== 5) СОХРАНЯЕМ ВЕСА НА GOOGLE ДИСК =====================
save_dir = f"{drive_root}/{DRIVE_SUBDIR}"
os.makedirs(save_dir, exist_ok=True)
best_on_drive = f"{save_dir}/best_yolov8m.pt"
shutil.copy(best_local, best_on_drive)
print("Веса сохранены на Google Диске:", best_on_drive)

# ===================== 6) ТЕСТОВЫЙ ИНФЕРЕНС С УКАЗАНИЕМ ПУТИ К СОХРАНЁННЫМ ВЕСАМ =====================
# Выберем тестовое изображение: сначала из test/images, иначе возьмём одно из val/train
test_imgs = glob.glob("/content/dataset/**/test/images/*.*", recursive=True)
if not test_imgs:
    test_imgs = glob.glob("/content/dataset/**/valid/images/*.*", recursive=True)
if not test_imgs:
    test_imgs = glob.glob("/content/dataset/**/train/images/*.*", recursive=True)
if not test_imgs:
    raise FileNotFoundError("Не найдено ни одного изображения в test/valid/train.")

test_img = test_imgs[0]
print("Тестовое изображение:", test_img)

# Загружаем веса с Google Диска
infer_model = YOLO(best_on_drive)

pred = infer_model.predict(
    source=test_img,
    imgsz=IMGSZ,
    conf=0.25,
    iou=0.45,
    save=True,
    project="runs/detect",
    name="predict_yolov8m",
    exist_ok=True
)
print("Инференс завершён. Результаты в runs/detect/predict_yolov8m/")

# ===================== 7) ВИЗУАЛИЗАЦИЯ РЕЗУЛЬТАТА В НОУТБУКЕ =====================
import cv2

# Ultralytics сохраняет отрисованное изображение в директорию предсказаний;
# найдём его (обычно имя исходного файла)
pred_dir = "runs/detect/predict_yolov8m"
rendered = sorted([p for p in glob.glob(f"{pred_dir}/*.*") if os.path.isfile(p)])
if not rendered:
    raise FileNotFoundError("Не найдено отрисованное предсказание в папке predict_yolov8m.")
render_path = rendered[0]
print("Визуализируем файл:", render_path)

img_bgr = cv2.imread(render_path)
img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)

plt.figure(figsize=(8,6))
plt.imshow(img_rgb)
plt.axis("off")
plt.title("YOLOv8m — предсказание на тестовом изображении")
plt.show()
